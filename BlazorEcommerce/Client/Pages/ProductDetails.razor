@page "/product/{id:int}"
@inject IProductService ProductService

@if(product == null)
{
    <span>@Message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0"> @product.Title</h2>
            <p>@product.Description</p>
            @if(product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-control" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId">
                                @variant.ProductType.Name
                            </option>
                        }
                    </select>
                </div>
            }
            @if (GetSelecetVariant() != null)
            {
                @if (GetSelecetVariant().OriginalPrice > GetSelecetVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelecetVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                   $@GetSelecetVariant().Price
                </h4>
            }
        </div>
    </div>
}

@code {
    private Product? product = null;

    private string Message = string.Empty;

    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Message = "Loading product...";

        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            Message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }
    private ProductVariant GetSelecetVariant()
    {
        var variants = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variants;
    }
 
}
